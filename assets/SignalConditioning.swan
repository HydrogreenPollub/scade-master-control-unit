-- version swan: 2025.0 graph: 2.0
function LinearMapping (value: int32;
                        fromLow : int32;
                        fromHigh : int32;
                        toHigh : int32;
                        toLow : int32;)
  returns (mapped: int32;)
{
  diagram
    (#0 def mapped
    #pragma diagram {"xy":"H30967;V15707","wh":"10000;3200"} #end)
    (#1 expr fromHigh - fromLow
    #pragma diagram {"xy":"H-41033;V15707","wh":"22000;3200"} #end)
    (#2 expr value - fromLow
    #pragma diagram {"xy":"H-74033;V8207","wh":"20000;3200"} #end)
    (#3 expr #4 + #5
      where
        (#4 group)
        (#5 group)
    #pragma diagram {"xy":"H8967;V15707"} #end)
    (#6 expr #7 / #8
      where
        (#7 group)
        (#8 group)
    #pragma diagram {"xy":"H-13033;V12007"} #end)
    (#9 expr toHigh - toLow
    #pragma diagram {"xy":"H-73033;V12007","wh":"18000;3200"} #end)
    (#10 expr toLow
    #pragma diagram {"xy":"H-13033;V17607","wh":"10000;3200"} #end)
    (#11 expr #12 * #13
      where
        (#12 group)
        (#13 group)
    #pragma diagram {"xy":"H-35033;V10107"} #end)
    
    (#14 wire #2 => #12)
    (#15 wire #1 => #8
    #pragma diagram {"wp":"#1 h7500 v-1800 #8"} #end)
    (#16 wire #3 => #0)
    (#17 wire #10 => #5)
    (#18 wire #6 => #4
    #pragma diagram {"wp":"#6 h7500 v1800 #4"} #end)
    (#19 wire #9 => #13)
    (#20 wire #11 => #7)
}

node Debouncing (i0: bool;)
  returns (o0: bool;)
{
  diagram
    (var
        count: int32 last = 0_i32;)
    (automaton $automaton0
      initial state #3 IDLE
      #pragma diagram {"xy":"h-42156;v-16412","wh":"38000;11200"} #end :
        diagram
          (#0 def o0
          #pragma diagram {"xy":"h11000;v0"} #end)
          (#1 expr false
          #pragma diagram {"xy":"h-10000;v0","wh":"10000;3200"} #end)
          
          (#2 wire #1 => #0)
      state #20 WAIT
      #pragma diagram {"xy":"h22362;v-16412","wh":"77588;19888"} #end :
        diagram
          (#4 expr #5 + #6
            where
              (#5 group)
              (#6 group)
          #pragma diagram {"xy":"h3794;v1256"} #end)
          (#7 def count
          #pragma diagram {"xy":"h27794;v3156","wh":"10000;3200"} #end)
          (#8 expr #9 pre #10
            where
              (#9 group)
              (#10 group)
          #pragma diagram {"xy":"h26794;v-2444"} #end)
          (#11 expr 1_i32
          #pragma diagram {"xy":"h-18206;v-644","wh":"10000;3200"} #end)
          (#12 expr 0_i32
          #pragma diagram {"xy":"h3794;v-4344","wh":"10000;3200"} #end)
          (#13 def o0
          #pragma diagram {"xy":"h-10206;v4344"} #end)
          (#14 expr false
          #pragma diagram {"xy":"h-26706;v4344","wh":"10000;3200"} #end)
          
          (#15 wire #4 => #7, #10
          #pragma diagram {"wp":"#4 h5500[h4000 v1900 #7, v-1800 #10]"} #end)
          (#16 wire #8 => #6
          #pragma diagram {"wp":"#8 h3500 v8200 h-38000 v-2600 #6"} #end)
          (#17 wire #11 => #5)
          (#18 wire #12 => #9)
          (#19 wire #14 => #13)
      state #24 CONFIRMED
      #pragma diagram {"xy":"h16775;v17588","wh":"50138;26000"} #end :
        diagram
          (#21 def o0
          #pragma diagram {"xy":"h-4619;v-6562"} #end)
          (#22 expr true
          #pragma diagram {"xy":"h-18931;v-6562"} #end)
          
          (#23 wire #22 => #21)
      :1: #3 until if (i0)
      restart #20
      #pragma diagram {"tp":"h19000;v0|#3 h2242 h2242 h-38794;v0|#20"} #end;
      :2: #20 until if (count = 4)
      restart #24
      #pragma diagram {"tp":"h-5588;v9944|#20 v3685 v3685 h0;v-13000|#24"} #end;
      :1: #20 until if (not i0)
      restart #3
      #pragma diagram {"tp":"h-38794;v-9562|#20 h-500 h-14533 h-6767 h-1962 h-1962;v981 v981 v667 v667 h0;v-5600|#3"} #end;
      :1: #24 until if (i0)
      restart #3
      #pragma diagram {"tp":"h-25069;v-12062|#24 h-500 h-12954 h-5977 h-8966 h-8966;v-7169 v-7169 v-667 v-667 h-3500;v5600|#3"} #end;
      #pragma diagram {"xy":"H120511;V-239567","wh":"130312;69175"} #end)
}

node SignalConditioning (i0: int32;)
  returns (o0: int32;)
{
}
