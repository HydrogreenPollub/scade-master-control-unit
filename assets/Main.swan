-- version swan: 2025.0 graph: 2.0
use Math::Common as MathCommon;

node MasterController (BrakePedalVoltageRaw : uint16;
                       AccPedalVoltageRaw : uint16;
                       IsEmergencyButtonPressed : bool;)
  returns (AccelerationVoltage : float32;
           IsMainValveOpen : bool;)
{
  diagram
    (#0 block EmergencyCheck
              #pragma diagram {"xy":"H29675;V-6650","wh":"20000;14000"} #end)
    (#1 expr IsEmergencyButtonPressed
    #pragma diagram {"xy":"H-55750;V3075","wh":"28000;3200"} #end)
    (#2 block LoopStepSignalConditioning
              #pragma diagram {"xy":"H-24975;V-6650","wh":"20000;14000"} #end)
    (#3 block LoopStepTransmissionIn
              #pragma diagram {"xy":"H-24975;V13575","wh":"20000;14000"} #end)
    (#4 expr BrakePedalVoltageRaw
    #pragma diagram {"xy":"H-51750;V-12050","wh":"24000;3200"} #end)
    (#5 expr AccPedalVoltageRaw
    #pragma diagram {"xy":"H-52750;V-5000","wh":"22000;3200"} #end)
    (#6 block MainStateMachine
              #pragma diagram {"xy":"H57150;V-6650","wh":"20000;14000"} #end)
    (#7 block SignalConditioningOut
              #pragma diagram {"xy":"H82575;V-6650","wh":"20000;14000"} #end)
    (#8 block TransmissionOut
              #pragma diagram {"xy":"H108000;V11125","wh":"20000;14000"} #end)
    (#9 def AccelerationVoltage
    #pragma diagram {"xy":"H114925;V-6650","wh":"22000;3200"} #end)
    (#10 def IsMainValveOpen
    #pragma diagram {"xy":"H115925;V-21900","wh":"20000;3200"} #end)
    
    (#11 wire #5 => #2)
    (#12 wire #4 => #2)
    (#13 wire #2 .(BrakePedalVoltage) => #0
    #pragma diagram {"wp":"v-3000|#2 #0"} #end)
    (#14 wire #1 => #2
    #pragma diagram {"wp":"#1 h4888 v-5175 #2"} #end)
    (#15 wire #3 => #0
    #pragma diagram {"wp":"v0|#3 h17325 v-16225 #0"} #end)
    (#16 wire #2 .(AccPedalVoltage) => #0
    #pragma diagram {"wp":"v0|#2 #0"} #end)
    (#17 wire #7 => #9
    #pragma diagram {"wp":"v0|#7 #9"} #end)
    (#18 wire #6 => #10
    #pragma diagram {"wp":"v0|#6 h2712 v-15250 #10"} #end)
}

node MainStateMachine (hasStartButtonTriggered : bool;
                       isProtiumBehavingAbnormal : bool;
                       vehicleStateOriginal : VehicleState;)
  returns (shouldProtiumRun : bool;
           isFuelCellCorrect : bool;
           vehicleState : VehicleState;)
{
  diagram
    (#0 block CheckProtiumAnomalies
              #pragma diagram {"xy":"H-41644;V-56425","wh":"29400;14000"} #end)
    (#4 expr HydrogenLeakVoltageRaw
    #pragma diagram {"xy":"H-84044;V-56425","wh":"26000;3200"} #end)
    (#5 def isFuelCellBehavingAbnormal
    #pragma diagram {"xy":"H4029;V-56425","wh":"30000;3200"} #end)
    (#21 def isFuelCellCorrect
    #pragma diagram {"xy":"H-9634;V-84062","wh":"20000;3200"} #end)
    (#22 expr fuelCellVoltage
    #pragma diagram {"xy":"H-56800;V-85962","wh":"20000;3200"} #end)
    (#23 expr #24 >= #25
      where
        (#24 group)
        (#25 group)
    #pragma diagram {"xy":"H-36588;V-84062"} #end)
    (#26 expr 5.0
    #pragma diagram {"xy":"H-50800;V-82162"} #end)
    (#31 def vehicleState
    #pragma diagram {"xy":"H-4600;V-112925","wh":"16000;3200"} #end)
    (#32 expr #33 .  fuelCellVoltage
      where
        (#33 group)
    #pragma diagram {"xy":"H-46162;V-114825","wh":"24000;7000"} #end)
    (#34 expr vehicleStateOriginal
    #pragma diagram {"xy":"H-77362;V-114825","wh":"24000;3200"} #end)
    (#35 expr fuelCellVoltage
    #pragma diagram {"xy":"H-44162;V-106887","wh":"20000;3200"} #end)
    (#36 expr #37 * #38
      where
        (#37 group)
        (#38 group)
    #pragma diagram {"xy":"H-25500;V-112925"} #end)
    
    (#6 wire #4 => #0)
    (#7 wire #0 => #5
    #pragma diagram {"wp":"v0|#0 #5"} #end)
    (#27 wire #26 => #25)
    (#28 wire #23 => #21)
    (#29 wire #22 => #24)
    (#39 wire #34 => #33)
    (#40 wire #32 => #37)
    (#41 wire #35 => #38
    #pragma diagram {"wp":"#35 h3082 v-4138 #38"} #end)
    (#42 wire #36 => #31)
    
    (var
        isFuelCellBehavingAbnormal: bool;)
    (automaton $mainAutomaton
      state #1 Running
      #pragma diagram {"xy":"h20778;v-19388","wh":"54300;26000"} #end :
        diagram
          (#8 def shouldProtiumRun
          #pragma diagram {"xy":"h11150;v6238","wh":"20000;3200"} #end)
          (#9 expr true
          #pragma diagram {"xy":"h-19150;v6238"} #end)
          
          (#10 wire #9 => #8)
      state #2 Failure
      #pragma diagram {"xy":"h86078;v-17274","wh":"54300;26000"} #end :
        diagram
          (#11 def shouldProtiumRun
          #pragma diagram {"xy":"h11150;v4124","wh":"20000;3200"} #end)
          (#12 expr false
          #pragma diagram {"xy":"h-18150;v4124","wh":"10000;3200"} #end)
          
          (#13 wire #12 => #11)
      state #3 Idle
      #pragma diagram {"xy":"h-40922;v-19388","wh":"54300;26000"} #end :
        diagram
          (#14 def shouldProtiumRun
          #pragma diagram {"xy":"h14077;v7038","wh":"20000;3200"} #end)
          (#15 expr false
          #pragma diagram {"xy":"h-15223;v7038","wh":"10000;3200"} #end)
          
          (#16 wire #15 => #14)
      state #20 Shutdown
      #pragma diagram {"xy":"h-12722;v27362","wh":"51200;26000"} #end :
        diagram
          (#17 def shouldProtiumRun
          #pragma diagram {"xy":"h12700;v4300","wh":"20000;3200"} #end)
          (#18 expr false
          #pragma diagram {"xy":"h-16600;v4300","wh":"10000;3200"} #end)
          
          (#19 wire #18 => #17)
      initial state #30 Init
      #pragma diagram {"xy":"h-93228;v-19388","wh":"40000;26000"} #end :
      :1: #1 until 
      restart #2
      #pragma diagram {"tp":"h27150;v1056|#1 h3667 h3667 h-27150;v-1056|#2"} #end;
      :1: #3 until 
      restart #1
      #pragma diagram {"tp":"h27150;v0|#3 h2467 h2467 h-27150;v0|#1"} #end;
      :2: #1 until if (isFuelCellBehavingAbnormal)
      restart #20
      #pragma diagram {"tp":"h-17525;v13000|#1 v6917 v6917 h15975;v-13000|#20"} #end;
      :1: #20 until if (hasStartButtonTriggered)
      restart #1
      #pragma diagram {"tp":"h25600;v-6700|#20 h500 h500 h500 h3200 h3200;v-6262 v-6262 v-4175 v-9683 h0;v13000|#1"} #end;
      :1: #30 until 
      restart #3
      #pragma diagram {"tp":"h20000;v0|#30 h1719 h1719 h-27150;v0|#3"} #end;
      #pragma diagram {"xy":"H-46722;V4462","wh":"234456;90525"} #end)
}

node CheckProtiumAnomalies (hydrogenLeakVoltageRaw: uint16;)
  returns (isAbnormal: bool;)
{
  diagram
    (#0 expr #1 >= #2
      where
        (#1 group)
        (#2 group)
    #pragma diagram {"xy":"H-74850;V-950"} #end)
    (#3 def isAbnormal
    #pragma diagram {"xy":"H-35750;V-950","wh":"14000;3200"} #end)
    (#4 expr hydrogenLeakVoltageRaw
    #pragma diagram {"xy":"H-140225;V-7738","wh":"26000;3200"} #end)
    (#5 block ConditionLeakVoltage
              #pragma diagram {"xy":"H-103538;V-7738","wh":"20000;14000"} #end)
    (#6 expr HydrogenLeakVoltageMaximum
    #pragma diagram {"xy":"H-104350;V6150","wh":"30000;3200"} #end)
    
    (#7 wire #6 => #2
    #pragma diagram {"wp":"#6 h6250 v-5200 #2"} #end)
    (#8 wire #5 => #1
    #pragma diagram {"wp":"v4888|#5 #1"} #end)
    (#9 wire #0 => #3)
    (#10 wire #4 => #5)
}

const HydrogenLeakVoltageMaximum: float32 = 1.1;

sensor HydrogenLeakVoltageRaw: uint16;

node ConditionLeakVoltage (voltage: uint16;)
  returns (result: float32;)
{
  diagram
    (#0 expr voltage
    #pragma diagram {"xy":"H-105250;V-27250","wh":"12000;3200"} #end)
    (#1 def result
    #pragma diagram {"xy":"H-36150;V-27250","wh":"10000;3200"} #end)
    (#2 expr (#3 :> float32)
      where
        (#3 group)
    #pragma diagram {"xy":"H-68050;V-27250","wh":"16000;7000"} #end)
    
    (#4 wire #0 => #3)
    (#5 wire #2 => #1)
}

sensor fuelCellVoltage: float32;

type VehicleState = { 
    fuelCellVoltage: float32, 
    supercapacitorVoltage: float32,
    errorMask: uint32
}
;

type ErrorState = enum { H2Leakage, SCOverVoltage, SCUnderVoltage, None };

const ERROR_H2_LEAKAGE: uint32 = 1;

const ERROR_FC_V_OVERVOLTAGE: uint32 = 2;

const ERROR_FC_V_UNDERVOLTAGE: uint32 = 4;

node LoopStepSignalConditioning (i0: int32;)
  returns (o0: int32;)
{
}

node LoopStepTransmissionIn (i0: int32;)
  returns (o0: int32;)
{
}

node EmergencyCheck (i0: int32;)
  returns (o0: int32;)
{
}

node SignalConditioningOut (i0: int32;)
  returns (o0: int32;)
{
}

node TransmissionOut (i0: int32;)
  returns (o0: int32;)
{
}
