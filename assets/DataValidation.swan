-- version swan: 2025.1 graph: 2.0
node Validation (i0: int32;)
  returns ()
{
}

node EmergencyCheck (i0: int32;)
  returns ()
{
}

node ErrorCheck (i0: int32;)
  returns ()
{
}

node WarningCheck (i0: int32;)
  returns ()
{
}

node CheckProtiumAnomalies (hydrogenLeakVoltageRaw: uint16;)
  returns (isAbnormal: bool;)
{
  diagram
    (#0 expr #1 >= #2
      where
        (#1 group)
        (#2 group)
    #pragma diagram {"xy":"H-74850;V-950"} #end)
    (#3 def isAbnormal
    #pragma diagram {"xy":"H-35750;V-950","wh":"14000;3200"} #end)
    (#4 expr hydrogenLeakVoltageRaw
    #pragma diagram {"xy":"H-140225;V-7738","wh":"26000;3200"} #end)
    (#5 block ConditionLeakVoltage
              #pragma diagram {"xy":"H-103538;V-7738","wh":"20000;14000"} #end)
    (#6 expr HydrogenLeakVoltageMaximum
    #pragma diagram {"xy":"H-104350;V6150","wh":"30000;3200"} #end)
    
    (#7 wire #6 => #2
    #pragma diagram {"wp":"#6 h6250 v-5200 #2"} #end)
    (#8 wire #5 => #1
    #pragma diagram {"wp":"v4888|#5 #1"} #end)
    (#9 wire #0 => #3)
    (#10 wire #4 => #5)
}

type ErrorState = enum { H2Leakage, SCOverVoltage, SCUnderVoltage, None };

const ERROR_H2_LEAKAGE: uint32 = 1;

const ERROR_FC_V_OVERVOLTAGE: uint32 = 2;

const ERROR_FC_V_UNDERVOLTAGE: uint32 = 4;
